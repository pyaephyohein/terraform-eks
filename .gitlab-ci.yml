stages:
  - validate
  - plan
  - apply
  - destroy
image:
  name: pyaephyohein/tfrunner:1.5.5
  entrypoint:
    - '/usr/bin/env'
    - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'
before_script:
  - export AWS_ACCESS_KEY=${AWS_ACCESS_KEY_ID}
  - export AWS_SECRET_ACCESS_KEY=${AWS_SECRET_ACCESS_KEY}
  - export AWS_DEFAULT_REGION=${AWS_REGION}
  - rm -rf .terraform
  - terraform --version
validate:
  stage: validate
  script:
    - terraform validate
  when: manual
1. Plan backend:
  stage: plan
  script:
    - cd backend/
    - terraform init
    - terraform plan --var-file=../env.json
  when: manual
3. Plan update backend:
  stage: plan
  script:
    - cd backend/
    - aws s3 cp s3://${BUCKET_NAME}/backend.tfstate . --sse AES256
    - mv backend.tfstate terraform.tfstate
    - terraform init
    - terraform plan --var-file=../env.json
  dependencies:
    - validate
  when: manual
2. Plan EKS infra:
  stage: plan
  script:
    - cd eks/
    - aws s3 cp s3://${BUCKET_NAME}/backend.json . --sse AES256
    - terraform init --backend-config=./backend.json
    - terraform plan --var-file=../env.json
  dependencies:
    - validate
  when: manual
1. Apply backend:
  stage: apply
  script:
    - cd backend/
    - terraform init
    - terraform apply --var-file=../env.json --auto-approve
    - mv terraform.tfstate backend.tfstate
    - aws s3 cp backend.tfstate s3://${BUCKET_NAME} --sse AES256
    - aws s3 cp backend.json s3://${BUCKET_NAME} --sse AES256
  dependencies:
    - 1. Plan backend
  when: manual
3. Apply update backend:
  stage: apply
  script:
    - cd backend/
    - aws s3 cp s3://${BUCKET_NAME}/backend.tfstate . --sse AES256
    - mv backend.tfstate terraform.tfstate
    - terraform init
    - terraform plan --var-file=../env.json
    - aws s3 rm s3://${BUCKET_NAME}/backend.tfstate 
    - mv terraform.tfstate backend.tfstate
    - aws s3 cp backend.tfstate s3://${BUCKET_NAME} --sse AES256
  dependencies:
    - validate
  when: manual  
2. Apply EKS infra:
  stage: apply
  script:
    - cd eks/
    - aws s3 cp s3://${BUCKET_NAME}/backend.json . --sse AES256
    - terraform init --backend-config=./backend.json
    - terraform apply --var-file=../env.json --auto-approve
    - terraform output cluster_name
  dependencies:
    - 2. Plan EKS infra
  when: manual
2. Destroy backend:
  stage: destroy
  script:
    - cd backend/
    - terraform init
    - aws s3 cp s3://${BUCKET_NAME}/backend.tfstate . --sse AES256
    - mv backend.tfstate terraform.tfstate
    - terraform destroy --var-file=../env.json --auto-approve
  when: manual
1. Destroy EKS infra:
  stage: destroy
  script:
    - cd eks/
    - aws s3 cp s3://${BUCKET_NAME}/backend.json . --sse AES256
    - terraform init --backend-config=./backend.json
    - terraform destroy --var-file=../env.json --auto-approve
  when: manual